/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommentAnalysis } from "./CommentAnalysis";
import { CommentAnalysisCountArgs } from "./CommentAnalysisCountArgs";
import { CommentAnalysisFindManyArgs } from "./CommentAnalysisFindManyArgs";
import { CommentAnalysisFindUniqueArgs } from "./CommentAnalysisFindUniqueArgs";
import { CreateCommentAnalysisArgs } from "./CreateCommentAnalysisArgs";
import { UpdateCommentAnalysisArgs } from "./UpdateCommentAnalysisArgs";
import { DeleteCommentAnalysisArgs } from "./DeleteCommentAnalysisArgs";
import { CommentAnalysisService } from "../commentAnalysis.service";
@graphql.Resolver(() => CommentAnalysis)
export class CommentAnalysisResolverBase {
  constructor(protected readonly service: CommentAnalysisService) {}

  async _commentAnalysesMeta(
    @graphql.Args() args: CommentAnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommentAnalysis])
  async commentAnalyses(
    @graphql.Args() args: CommentAnalysisFindManyArgs
  ): Promise<CommentAnalysis[]> {
    return this.service.commentAnalyses(args);
  }

  @graphql.Query(() => CommentAnalysis, { nullable: true })
  async commentAnalysis(
    @graphql.Args() args: CommentAnalysisFindUniqueArgs
  ): Promise<CommentAnalysis | null> {
    const result = await this.service.commentAnalysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommentAnalysis)
  async createCommentAnalysis(
    @graphql.Args() args: CreateCommentAnalysisArgs
  ): Promise<CommentAnalysis> {
    return await this.service.createCommentAnalysis({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommentAnalysis)
  async updateCommentAnalysis(
    @graphql.Args() args: UpdateCommentAnalysisArgs
  ): Promise<CommentAnalysis | null> {
    try {
      return await this.service.updateCommentAnalysis({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommentAnalysis)
  async deleteCommentAnalysis(
    @graphql.Args() args: DeleteCommentAnalysisArgs
  ): Promise<CommentAnalysis | null> {
    try {
      return await this.service.deleteCommentAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
