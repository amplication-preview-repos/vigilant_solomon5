/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CommentAnalysis as PrismaCommentAnalysis,
} from "@prisma/client";

export class CommentAnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommentAnalysisCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commentAnalysis.count(args);
  }

  async commentAnalyses(
    args: Prisma.CommentAnalysisFindManyArgs
  ): Promise<PrismaCommentAnalysis[]> {
    return this.prisma.commentAnalysis.findMany(args);
  }
  async commentAnalysis(
    args: Prisma.CommentAnalysisFindUniqueArgs
  ): Promise<PrismaCommentAnalysis | null> {
    return this.prisma.commentAnalysis.findUnique(args);
  }
  async createCommentAnalysis(
    args: Prisma.CommentAnalysisCreateArgs
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.create(args);
  }
  async updateCommentAnalysis(
    args: Prisma.CommentAnalysisUpdateArgs
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.update(args);
  }
  async deleteCommentAnalysis(
    args: Prisma.CommentAnalysisDeleteArgs
  ): Promise<PrismaCommentAnalysis> {
    return this.prisma.commentAnalysis.delete(args);
  }
}
