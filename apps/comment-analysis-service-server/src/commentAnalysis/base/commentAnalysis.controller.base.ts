/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommentAnalysisService } from "../commentAnalysis.service";
import { CommentAnalysisCreateInput } from "./CommentAnalysisCreateInput";
import { CommentAnalysis } from "./CommentAnalysis";
import { CommentAnalysisFindManyArgs } from "./CommentAnalysisFindManyArgs";
import { CommentAnalysisWhereUniqueInput } from "./CommentAnalysisWhereUniqueInput";
import { CommentAnalysisUpdateInput } from "./CommentAnalysisUpdateInput";

export class CommentAnalysisControllerBase {
  constructor(protected readonly service: CommentAnalysisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommentAnalysis })
  async createCommentAnalysis(
    @common.Body() data: CommentAnalysisCreateInput
  ): Promise<CommentAnalysis> {
    return await this.service.createCommentAnalysis({
      data: data,
      select: {
        analysisResult: true,
        commentId: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommentAnalysis] })
  @ApiNestedQuery(CommentAnalysisFindManyArgs)
  async commentAnalyses(
    @common.Req() request: Request
  ): Promise<CommentAnalysis[]> {
    const args = plainToClass(CommentAnalysisFindManyArgs, request.query);
    return this.service.commentAnalyses({
      ...args,
      select: {
        analysisResult: true,
        commentId: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commentAnalysis(
    @common.Param() params: CommentAnalysisWhereUniqueInput
  ): Promise<CommentAnalysis | null> {
    const result = await this.service.commentAnalysis({
      where: params,
      select: {
        analysisResult: true,
        commentId: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommentAnalysis(
    @common.Param() params: CommentAnalysisWhereUniqueInput,
    @common.Body() data: CommentAnalysisUpdateInput
  ): Promise<CommentAnalysis | null> {
    try {
      return await this.service.updateCommentAnalysis({
        where: params,
        data: data,
        select: {
          analysisResult: true,
          commentId: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommentAnalysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommentAnalysis(
    @common.Param() params: CommentAnalysisWhereUniqueInput
  ): Promise<CommentAnalysis | null> {
    try {
      return await this.service.deleteCommentAnalysis({
        where: params,
        select: {
          analysisResult: true,
          commentId: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
